// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 25.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:Value)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Value {
    // message oneof groups
    pub data: ::std::option::Option<value::Data>,
    // special fields
    // @@protoc_insertion_point(special_field:Value.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Value {
    fn default() -> &'a Value {
        <Value as ::protobuf::Message>::default_instance()
    }
}

impl Value {
    pub fn new() -> Value {
        ::std::default::Default::default()
    }

    // string varchar = 1;

    pub fn varchar(&self) -> &str {
        match self.data {
            ::std::option::Option::Some(value::Data::Varchar(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_varchar(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_varchar(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(value::Data::Varchar(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_varchar(&mut self, v: ::std::string::String) {
        self.data = ::std::option::Option::Some(value::Data::Varchar(v))
    }

    // Mutable pointer to the field.
    pub fn mut_varchar(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(value::Data::Varchar(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(value::Data::Varchar(::std::string::String::new()));
        }
        match self.data {
            ::std::option::Option::Some(value::Data::Varchar(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_varchar(&mut self) -> ::std::string::String {
        if self.has_varchar() {
            match self.data.take() {
                ::std::option::Option::Some(value::Data::Varchar(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // int32 int32 = 2;

    pub fn int32(&self) -> i32 {
        match self.data {
            ::std::option::Option::Some(value::Data::Int32(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_int32(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_int32(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(value::Data::Int32(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_int32(&mut self, v: i32) {
        self.data = ::std::option::Option::Some(value::Data::Int32(v))
    }

    // int64 int64 = 3;

    pub fn int64(&self) -> i64 {
        match self.data {
            ::std::option::Option::Some(value::Data::Int64(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_int64(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_int64(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(value::Data::Int64(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_int64(&mut self, v: i64) {
        self.data = ::std::option::Option::Some(value::Data::Int64(v))
    }

    // uint32 unsigned32 = 4;

    pub fn unsigned32(&self) -> u32 {
        match self.data {
            ::std::option::Option::Some(value::Data::Unsigned32(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_unsigned32(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_unsigned32(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(value::Data::Unsigned32(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_unsigned32(&mut self, v: u32) {
        self.data = ::std::option::Option::Some(value::Data::Unsigned32(v))
    }

    // uint64 unsigned64 = 5;

    pub fn unsigned64(&self) -> u64 {
        match self.data {
            ::std::option::Option::Some(value::Data::Unsigned64(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_unsigned64(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_unsigned64(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(value::Data::Unsigned64(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_unsigned64(&mut self, v: u64) {
        self.data = ::std::option::Option::Some(value::Data::Unsigned64(v))
    }

    // float float32 = 6;

    pub fn float32(&self) -> f32 {
        match self.data {
            ::std::option::Option::Some(value::Data::Float32(v)) => v,
            _ => 0.,
        }
    }

    pub fn clear_float32(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_float32(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(value::Data::Float32(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_float32(&mut self, v: f32) {
        self.data = ::std::option::Option::Some(value::Data::Float32(v))
    }

    // double float64 = 7;

    pub fn float64(&self) -> f64 {
        match self.data {
            ::std::option::Option::Some(value::Data::Float64(v)) => v,
            _ => 0.,
        }
    }

    pub fn clear_float64(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_float64(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(value::Data::Float64(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_float64(&mut self, v: f64) {
        self.data = ::std::option::Option::Some(value::Data::Float64(v))
    }

    // bool boolean = 8;

    pub fn boolean(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(value::Data::Boolean(v)) => v,
            _ => false,
        }
    }

    pub fn clear_boolean(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_boolean(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(value::Data::Boolean(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_boolean(&mut self, v: bool) {
        self.data = ::std::option::Option::Some(value::Data::Boolean(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "varchar",
            Value::has_varchar,
            Value::varchar,
            Value::set_varchar,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "int32",
            Value::has_int32,
            Value::int32,
            Value::set_int32,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "int64",
            Value::has_int64,
            Value::int64,
            Value::set_int64,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "unsigned32",
            Value::has_unsigned32,
            Value::unsigned32,
            Value::set_unsigned32,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "unsigned64",
            Value::has_unsigned64,
            Value::unsigned64,
            Value::set_unsigned64,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "float32",
            Value::has_float32,
            Value::float32,
            Value::set_float32,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "float64",
            Value::has_float64,
            Value::float64,
            Value::set_float64,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "boolean",
            Value::has_boolean,
            Value::boolean,
            Value::set_boolean,
        ));
        oneofs.push(value::Data::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Value>(
            "Value",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Value {
    const NAME: &'static str = "Value";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data = ::std::option::Option::Some(value::Data::Varchar(is.read_string()?));
                },
                16 => {
                    self.data = ::std::option::Option::Some(value::Data::Int32(is.read_int32()?));
                },
                24 => {
                    self.data = ::std::option::Option::Some(value::Data::Int64(is.read_int64()?));
                },
                32 => {
                    self.data = ::std::option::Option::Some(value::Data::Unsigned32(is.read_uint32()?));
                },
                40 => {
                    self.data = ::std::option::Option::Some(value::Data::Unsigned64(is.read_uint64()?));
                },
                53 => {
                    self.data = ::std::option::Option::Some(value::Data::Float32(is.read_float()?));
                },
                57 => {
                    self.data = ::std::option::Option::Some(value::Data::Float64(is.read_double()?));
                },
                64 => {
                    self.data = ::std::option::Option::Some(value::Data::Boolean(is.read_bool()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &value::Data::Varchar(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &value::Data::Int32(v) => {
                    my_size += ::protobuf::rt::int32_size(2, v);
                },
                &value::Data::Int64(v) => {
                    my_size += ::protobuf::rt::int64_size(3, v);
                },
                &value::Data::Unsigned32(v) => {
                    my_size += ::protobuf::rt::uint32_size(4, v);
                },
                &value::Data::Unsigned64(v) => {
                    my_size += ::protobuf::rt::uint64_size(5, v);
                },
                &value::Data::Float32(v) => {
                    my_size += 1 + 4;
                },
                &value::Data::Float64(v) => {
                    my_size += 1 + 8;
                },
                &value::Data::Boolean(v) => {
                    my_size += 1 + 1;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &value::Data::Varchar(ref v) => {
                    os.write_string(1, v)?;
                },
                &value::Data::Int32(v) => {
                    os.write_int32(2, v)?;
                },
                &value::Data::Int64(v) => {
                    os.write_int64(3, v)?;
                },
                &value::Data::Unsigned32(v) => {
                    os.write_uint32(4, v)?;
                },
                &value::Data::Unsigned64(v) => {
                    os.write_uint64(5, v)?;
                },
                &value::Data::Float32(v) => {
                    os.write_float(6, v)?;
                },
                &value::Data::Float64(v) => {
                    os.write_double(7, v)?;
                },
                &value::Data::Boolean(v) => {
                    os.write_bool(8, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Value {
        Value::new()
    }

    fn clear(&mut self) {
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Value {
        static instance: Value = Value {
            data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Value {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Value").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Value {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Value {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Value`
pub mod value {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:Value.data)
    pub enum Data {
        // @@protoc_insertion_point(oneof_field:Value.varchar)
        Varchar(::std::string::String),
        // @@protoc_insertion_point(oneof_field:Value.int32)
        Int32(i32),
        // @@protoc_insertion_point(oneof_field:Value.int64)
        Int64(i64),
        // @@protoc_insertion_point(oneof_field:Value.unsigned32)
        Unsigned32(u32),
        // @@protoc_insertion_point(oneof_field:Value.unsigned64)
        Unsigned64(u64),
        // @@protoc_insertion_point(oneof_field:Value.float32)
        Float32(f32),
        // @@protoc_insertion_point(oneof_field:Value.float64)
        Float64(f64),
        // @@protoc_insertion_point(oneof_field:Value.boolean)
        Boolean(bool),
    }

    impl ::protobuf::Oneof for Data {
    }

    impl ::protobuf::OneofFull for Data {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Value as ::protobuf::MessageFull>::descriptor().oneof_by_name("data").unwrap()).clone()
        }
    }

    impl Data {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Data>("data")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ccommon.proto\"\xf3\x01\n\x05Value\x12\x1a\n\x07varchar\x18\x01\x20\
    \x01(\tH\0R\x07varchar\x12\x16\n\x05int32\x18\x02\x20\x01(\x05H\0R\x05in\
    t32\x12\x16\n\x05int64\x18\x03\x20\x01(\x03H\0R\x05int64\x12\x20\n\nunsi\
    gned32\x18\x04\x20\x01(\rH\0R\nunsigned32\x12\x20\n\nunsigned64\x18\x05\
    \x20\x01(\x04H\0R\nunsigned64\x12\x1a\n\x07float32\x18\x06\x20\x01(\x02H\
    \0R\x07float32\x12\x1a\n\x07float64\x18\x07\x20\x01(\x01H\0R\x07float64\
    \x12\x1a\n\x07boolean\x18\x08\x20\x01(\x08H\0R\x07booleanB\x06\n\x04data\
    b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Value::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

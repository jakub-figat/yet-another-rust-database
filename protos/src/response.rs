// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 25.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `response.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Response {
    // message oneof groups
    pub data: ::std::option::Option<response::Data>,
    // special fields
    // @@protoc_insertion_point(special_field:Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    // .GetResponse get = 1;

    pub fn get(&self) -> &GetResponse {
        match self.data {
            ::std::option::Option::Some(response::Data::Get(ref v)) => v,
            _ => <GetResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_get(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_get(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(response::Data::Get(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_get(&mut self, v: GetResponse) {
        self.data = ::std::option::Option::Some(response::Data::Get(v))
    }

    // Mutable pointer to the field.
    pub fn mut_get(&mut self) -> &mut GetResponse {
        if let ::std::option::Option::Some(response::Data::Get(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(response::Data::Get(GetResponse::new()));
        }
        match self.data {
            ::std::option::Option::Some(response::Data::Get(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_get(&mut self) -> GetResponse {
        if self.has_get() {
            match self.data.take() {
                ::std::option::Option::Some(response::Data::Get(v)) => v,
                _ => panic!(),
            }
        } else {
            GetResponse::new()
        }
    }

    // .InsertResponse insert = 2;

    pub fn insert(&self) -> &InsertResponse {
        match self.data {
            ::std::option::Option::Some(response::Data::Insert(ref v)) => v,
            _ => <InsertResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_insert(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_insert(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(response::Data::Insert(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_insert(&mut self, v: InsertResponse) {
        self.data = ::std::option::Option::Some(response::Data::Insert(v))
    }

    // Mutable pointer to the field.
    pub fn mut_insert(&mut self) -> &mut InsertResponse {
        if let ::std::option::Option::Some(response::Data::Insert(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(response::Data::Insert(InsertResponse::new()));
        }
        match self.data {
            ::std::option::Option::Some(response::Data::Insert(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_insert(&mut self) -> InsertResponse {
        if self.has_insert() {
            match self.data.take() {
                ::std::option::Option::Some(response::Data::Insert(v)) => v,
                _ => panic!(),
            }
        } else {
            InsertResponse::new()
        }
    }

    // .DeleteResponse delete = 3;

    pub fn delete(&self) -> &DeleteResponse {
        match self.data {
            ::std::option::Option::Some(response::Data::Delete(ref v)) => v,
            _ => <DeleteResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_delete(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_delete(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(response::Data::Delete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delete(&mut self, v: DeleteResponse) {
        self.data = ::std::option::Option::Some(response::Data::Delete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delete(&mut self) -> &mut DeleteResponse {
        if let ::std::option::Option::Some(response::Data::Delete(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(response::Data::Delete(DeleteResponse::new()));
        }
        match self.data {
            ::std::option::Option::Some(response::Data::Delete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delete(&mut self) -> DeleteResponse {
        if self.has_delete() {
            match self.data.take() {
                ::std::option::Option::Some(response::Data::Delete(v)) => v,
                _ => panic!(),
            }
        } else {
            DeleteResponse::new()
        }
    }

    // .BatchResponse batch = 4;

    pub fn batch(&self) -> &BatchResponse {
        match self.data {
            ::std::option::Option::Some(response::Data::Batch(ref v)) => v,
            _ => <BatchResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_batch(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_batch(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(response::Data::Batch(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_batch(&mut self, v: BatchResponse) {
        self.data = ::std::option::Option::Some(response::Data::Batch(v))
    }

    // Mutable pointer to the field.
    pub fn mut_batch(&mut self) -> &mut BatchResponse {
        if let ::std::option::Option::Some(response::Data::Batch(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(response::Data::Batch(BatchResponse::new()));
        }
        match self.data {
            ::std::option::Option::Some(response::Data::Batch(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_batch(&mut self) -> BatchResponse {
        if self.has_batch() {
            match self.data.take() {
                ::std::option::Option::Some(response::Data::Batch(v)) => v,
                _ => panic!(),
            }
        } else {
            BatchResponse::new()
        }
    }

    // .ClientError client_error = 5;

    pub fn client_error(&self) -> &ClientError {
        match self.data {
            ::std::option::Option::Some(response::Data::ClientError(ref v)) => v,
            _ => <ClientError as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_client_error(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_client_error(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(response::Data::ClientError(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_client_error(&mut self, v: ClientError) {
        self.data = ::std::option::Option::Some(response::Data::ClientError(v))
    }

    // Mutable pointer to the field.
    pub fn mut_client_error(&mut self) -> &mut ClientError {
        if let ::std::option::Option::Some(response::Data::ClientError(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(response::Data::ClientError(ClientError::new()));
        }
        match self.data {
            ::std::option::Option::Some(response::Data::ClientError(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_client_error(&mut self) -> ClientError {
        if self.has_client_error() {
            match self.data.take() {
                ::std::option::Option::Some(response::Data::ClientError(v)) => v,
                _ => panic!(),
            }
        } else {
            ClientError::new()
        }
    }

    // .ServerError server_error = 6;

    pub fn server_error(&self) -> &ServerError {
        match self.data {
            ::std::option::Option::Some(response::Data::ServerError(ref v)) => v,
            _ => <ServerError as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_server_error(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_server_error(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(response::Data::ServerError(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_server_error(&mut self, v: ServerError) {
        self.data = ::std::option::Option::Some(response::Data::ServerError(v))
    }

    // Mutable pointer to the field.
    pub fn mut_server_error(&mut self) -> &mut ServerError {
        if let ::std::option::Option::Some(response::Data::ServerError(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(response::Data::ServerError(ServerError::new()));
        }
        match self.data {
            ::std::option::Option::Some(response::Data::ServerError(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_server_error(&mut self) -> ServerError {
        if self.has_server_error() {
            match self.data.take() {
                ::std::option::Option::Some(response::Data::ServerError(v)) => v,
                _ => panic!(),
            }
        } else {
            ServerError::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, GetResponse>(
            "get",
            Response::has_get,
            Response::get,
            Response::mut_get,
            Response::set_get,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, InsertResponse>(
            "insert",
            Response::has_insert,
            Response::insert,
            Response::mut_insert,
            Response::set_insert,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, DeleteResponse>(
            "delete",
            Response::has_delete,
            Response::delete,
            Response::mut_delete,
            Response::set_delete,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, BatchResponse>(
            "batch",
            Response::has_batch,
            Response::batch,
            Response::mut_batch,
            Response::set_batch,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ClientError>(
            "client_error",
            Response::has_client_error,
            Response::client_error,
            Response::mut_client_error,
            Response::set_client_error,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ServerError>(
            "server_error",
            Response::has_server_error,
            Response::server_error,
            Response::mut_server_error,
            Response::set_server_error,
        ));
        oneofs.push(response::Data::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Response>(
            "Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Response {
    const NAME: &'static str = "Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data = ::std::option::Option::Some(response::Data::Get(is.read_message()?));
                },
                18 => {
                    self.data = ::std::option::Option::Some(response::Data::Insert(is.read_message()?));
                },
                26 => {
                    self.data = ::std::option::Option::Some(response::Data::Delete(is.read_message()?));
                },
                34 => {
                    self.data = ::std::option::Option::Some(response::Data::Batch(is.read_message()?));
                },
                42 => {
                    self.data = ::std::option::Option::Some(response::Data::ClientError(is.read_message()?));
                },
                50 => {
                    self.data = ::std::option::Option::Some(response::Data::ServerError(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &response::Data::Get(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &response::Data::Insert(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &response::Data::Delete(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &response::Data::Batch(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &response::Data::ClientError(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &response::Data::ServerError(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &response::Data::Get(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &response::Data::Insert(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &response::Data::Delete(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &response::Data::Batch(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &response::Data::ClientError(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &response::Data::ServerError(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Response {
        Response::new()
    }

    fn clear(&mut self) {
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Response {
        static instance: Response = Response {
            data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Response`
pub mod response {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:Response.data)
    pub enum Data {
        // @@protoc_insertion_point(oneof_field:Response.get)
        Get(super::GetResponse),
        // @@protoc_insertion_point(oneof_field:Response.insert)
        Insert(super::InsertResponse),
        // @@protoc_insertion_point(oneof_field:Response.delete)
        Delete(super::DeleteResponse),
        // @@protoc_insertion_point(oneof_field:Response.batch)
        Batch(super::BatchResponse),
        // @@protoc_insertion_point(oneof_field:Response.client_error)
        ClientError(super::ClientError),
        // @@protoc_insertion_point(oneof_field:Response.server_error)
        ServerError(super::ServerError),
    }

    impl ::protobuf::Oneof for Data {
    }

    impl ::protobuf::OneofFull for Data {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Response as ::protobuf::MessageFull>::descriptor().oneof_by_name("data").unwrap()).clone()
        }
    }

    impl Data {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Data>("data")
        }
    }
}

// @@protoc_insertion_point(message:GetResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetResponse {
    // message fields
    // @@protoc_insertion_point(field:GetResponse.hash_key)
    pub hash_key: ::std::string::String,
    // @@protoc_insertion_point(field:GetResponse.sort_key)
    pub sort_key: ::protobuf::MessageField<super::common::Value>,
    // @@protoc_insertion_point(field:GetResponse.values)
    pub values: ::std::vec::Vec<super::common::Value>,
    // @@protoc_insertion_point(field:GetResponse.table)
    pub table: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:GetResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetResponse {
    fn default() -> &'a GetResponse {
        <GetResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetResponse {
    pub fn new() -> GetResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash_key",
            |m: &GetResponse| { &m.hash_key },
            |m: &mut GetResponse| { &mut m.hash_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Value>(
            "sort_key",
            |m: &GetResponse| { &m.sort_key },
            |m: &mut GetResponse| { &mut m.sort_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "values",
            |m: &GetResponse| { &m.values },
            |m: &mut GetResponse| { &mut m.values },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "table",
            |m: &GetResponse| { &m.table },
            |m: &mut GetResponse| { &mut m.table },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetResponse>(
            "GetResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetResponse {
    const NAME: &'static str = "GetResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.hash_key = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sort_key)?;
                },
                26 => {
                    self.values.push(is.read_message()?);
                },
                34 => {
                    self.table = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.hash_key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.hash_key);
        }
        if let Some(v) = self.sort_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.table.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.table);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.hash_key.is_empty() {
            os.write_string(1, &self.hash_key)?;
        }
        if let Some(v) = self.sort_key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.values {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if !self.table.is_empty() {
            os.write_string(4, &self.table)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetResponse {
        GetResponse::new()
    }

    fn clear(&mut self) {
        self.hash_key.clear();
        self.sort_key.clear();
        self.values.clear();
        self.table.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetResponse {
        static instance: GetResponse = GetResponse {
            hash_key: ::std::string::String::new(),
            sort_key: ::protobuf::MessageField::none(),
            values: ::std::vec::Vec::new(),
            table: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:InsertResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct InsertResponse {
    // message fields
    // @@protoc_insertion_point(field:InsertResponse.okay)
    pub okay: bool,
    // special fields
    // @@protoc_insertion_point(special_field:InsertResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InsertResponse {
    fn default() -> &'a InsertResponse {
        <InsertResponse as ::protobuf::Message>::default_instance()
    }
}

impl InsertResponse {
    pub fn new() -> InsertResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "okay",
            |m: &InsertResponse| { &m.okay },
            |m: &mut InsertResponse| { &mut m.okay },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InsertResponse>(
            "InsertResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InsertResponse {
    const NAME: &'static str = "InsertResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.okay = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.okay != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.okay != false {
            os.write_bool(1, self.okay)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InsertResponse {
        InsertResponse::new()
    }

    fn clear(&mut self) {
        self.okay = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InsertResponse {
        static instance: InsertResponse = InsertResponse {
            okay: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InsertResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InsertResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InsertResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InsertResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:DeleteResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DeleteResponse {
    // message fields
    // @@protoc_insertion_point(field:DeleteResponse.okay)
    pub okay: bool,
    // special fields
    // @@protoc_insertion_point(special_field:DeleteResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeleteResponse {
    fn default() -> &'a DeleteResponse {
        <DeleteResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeleteResponse {
    pub fn new() -> DeleteResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "okay",
            |m: &DeleteResponse| { &m.okay },
            |m: &mut DeleteResponse| { &mut m.okay },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteResponse>(
            "DeleteResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeleteResponse {
    const NAME: &'static str = "DeleteResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.okay = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.okay != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.okay != false {
            os.write_bool(1, self.okay)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeleteResponse {
        DeleteResponse::new()
    }

    fn clear(&mut self) {
        self.okay = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeleteResponse {
        static instance: DeleteResponse = DeleteResponse {
            okay: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeleteResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeleteResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeleteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:BatchResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BatchResponse {
    // message fields
    // @@protoc_insertion_point(field:BatchResponse.items)
    pub items: ::std::vec::Vec<BatchResponseItem>,
    // special fields
    // @@protoc_insertion_point(special_field:BatchResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BatchResponse {
    fn default() -> &'a BatchResponse {
        <BatchResponse as ::protobuf::Message>::default_instance()
    }
}

impl BatchResponse {
    pub fn new() -> BatchResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &BatchResponse| { &m.items },
            |m: &mut BatchResponse| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BatchResponse>(
            "BatchResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BatchResponse {
    const NAME: &'static str = "BatchResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BatchResponse {
        BatchResponse::new()
    }

    fn clear(&mut self) {
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BatchResponse {
        static instance: BatchResponse = BatchResponse {
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BatchResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BatchResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BatchResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:BatchResponseItem)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BatchResponseItem {
    // message oneof groups
    pub item: ::std::option::Option<batch_response_item::Item>,
    // special fields
    // @@protoc_insertion_point(special_field:BatchResponseItem.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BatchResponseItem {
    fn default() -> &'a BatchResponseItem {
        <BatchResponseItem as ::protobuf::Message>::default_instance()
    }
}

impl BatchResponseItem {
    pub fn new() -> BatchResponseItem {
        ::std::default::Default::default()
    }

    // .GetResponse get = 1;

    pub fn get(&self) -> &GetResponse {
        match self.item {
            ::std::option::Option::Some(batch_response_item::Item::Get(ref v)) => v,
            _ => <GetResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_get(&mut self) {
        self.item = ::std::option::Option::None;
    }

    pub fn has_get(&self) -> bool {
        match self.item {
            ::std::option::Option::Some(batch_response_item::Item::Get(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_get(&mut self, v: GetResponse) {
        self.item = ::std::option::Option::Some(batch_response_item::Item::Get(v))
    }

    // Mutable pointer to the field.
    pub fn mut_get(&mut self) -> &mut GetResponse {
        if let ::std::option::Option::Some(batch_response_item::Item::Get(_)) = self.item {
        } else {
            self.item = ::std::option::Option::Some(batch_response_item::Item::Get(GetResponse::new()));
        }
        match self.item {
            ::std::option::Option::Some(batch_response_item::Item::Get(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_get(&mut self) -> GetResponse {
        if self.has_get() {
            match self.item.take() {
                ::std::option::Option::Some(batch_response_item::Item::Get(v)) => v,
                _ => panic!(),
            }
        } else {
            GetResponse::new()
        }
    }

    // .InsertResponse insert = 2;

    pub fn insert(&self) -> &InsertResponse {
        match self.item {
            ::std::option::Option::Some(batch_response_item::Item::Insert(ref v)) => v,
            _ => <InsertResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_insert(&mut self) {
        self.item = ::std::option::Option::None;
    }

    pub fn has_insert(&self) -> bool {
        match self.item {
            ::std::option::Option::Some(batch_response_item::Item::Insert(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_insert(&mut self, v: InsertResponse) {
        self.item = ::std::option::Option::Some(batch_response_item::Item::Insert(v))
    }

    // Mutable pointer to the field.
    pub fn mut_insert(&mut self) -> &mut InsertResponse {
        if let ::std::option::Option::Some(batch_response_item::Item::Insert(_)) = self.item {
        } else {
            self.item = ::std::option::Option::Some(batch_response_item::Item::Insert(InsertResponse::new()));
        }
        match self.item {
            ::std::option::Option::Some(batch_response_item::Item::Insert(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_insert(&mut self) -> InsertResponse {
        if self.has_insert() {
            match self.item.take() {
                ::std::option::Option::Some(batch_response_item::Item::Insert(v)) => v,
                _ => panic!(),
            }
        } else {
            InsertResponse::new()
        }
    }

    // .DeleteResponse delete = 3;

    pub fn delete(&self) -> &DeleteResponse {
        match self.item {
            ::std::option::Option::Some(batch_response_item::Item::Delete(ref v)) => v,
            _ => <DeleteResponse as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_delete(&mut self) {
        self.item = ::std::option::Option::None;
    }

    pub fn has_delete(&self) -> bool {
        match self.item {
            ::std::option::Option::Some(batch_response_item::Item::Delete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delete(&mut self, v: DeleteResponse) {
        self.item = ::std::option::Option::Some(batch_response_item::Item::Delete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delete(&mut self) -> &mut DeleteResponse {
        if let ::std::option::Option::Some(batch_response_item::Item::Delete(_)) = self.item {
        } else {
            self.item = ::std::option::Option::Some(batch_response_item::Item::Delete(DeleteResponse::new()));
        }
        match self.item {
            ::std::option::Option::Some(batch_response_item::Item::Delete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delete(&mut self) -> DeleteResponse {
        if self.has_delete() {
            match self.item.take() {
                ::std::option::Option::Some(batch_response_item::Item::Delete(v)) => v,
                _ => panic!(),
            }
        } else {
            DeleteResponse::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, GetResponse>(
            "get",
            BatchResponseItem::has_get,
            BatchResponseItem::get,
            BatchResponseItem::mut_get,
            BatchResponseItem::set_get,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, InsertResponse>(
            "insert",
            BatchResponseItem::has_insert,
            BatchResponseItem::insert,
            BatchResponseItem::mut_insert,
            BatchResponseItem::set_insert,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, DeleteResponse>(
            "delete",
            BatchResponseItem::has_delete,
            BatchResponseItem::delete,
            BatchResponseItem::mut_delete,
            BatchResponseItem::set_delete,
        ));
        oneofs.push(batch_response_item::Item::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BatchResponseItem>(
            "BatchResponseItem",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BatchResponseItem {
    const NAME: &'static str = "BatchResponseItem";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.item = ::std::option::Option::Some(batch_response_item::Item::Get(is.read_message()?));
                },
                18 => {
                    self.item = ::std::option::Option::Some(batch_response_item::Item::Insert(is.read_message()?));
                },
                26 => {
                    self.item = ::std::option::Option::Some(batch_response_item::Item::Delete(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.item {
            match v {
                &batch_response_item::Item::Get(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &batch_response_item::Item::Insert(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &batch_response_item::Item::Delete(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.item {
            match v {
                &batch_response_item::Item::Get(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &batch_response_item::Item::Insert(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &batch_response_item::Item::Delete(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BatchResponseItem {
        BatchResponseItem::new()
    }

    fn clear(&mut self) {
        self.item = ::std::option::Option::None;
        self.item = ::std::option::Option::None;
        self.item = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BatchResponseItem {
        static instance: BatchResponseItem = BatchResponseItem {
            item: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BatchResponseItem {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BatchResponseItem").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BatchResponseItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchResponseItem {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `BatchResponseItem`
pub mod batch_response_item {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:BatchResponseItem.item)
    pub enum Item {
        // @@protoc_insertion_point(oneof_field:BatchResponseItem.get)
        Get(super::GetResponse),
        // @@protoc_insertion_point(oneof_field:BatchResponseItem.insert)
        Insert(super::InsertResponse),
        // @@protoc_insertion_point(oneof_field:BatchResponseItem.delete)
        Delete(super::DeleteResponse),
    }

    impl ::protobuf::Oneof for Item {
    }

    impl ::protobuf::OneofFull for Item {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::BatchResponseItem as ::protobuf::MessageFull>::descriptor().oneof_by_name("item").unwrap()).clone()
        }
    }

    impl Item {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Item>("item")
        }
    }
}

// @@protoc_insertion_point(message:ClientError)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ClientError {
    // message fields
    // @@protoc_insertion_point(field:ClientError.detail)
    pub detail: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ClientError.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ClientError {
    fn default() -> &'a ClientError {
        <ClientError as ::protobuf::Message>::default_instance()
    }
}

impl ClientError {
    pub fn new() -> ClientError {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "detail",
            |m: &ClientError| { &m.detail },
            |m: &mut ClientError| { &mut m.detail },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ClientError>(
            "ClientError",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ClientError {
    const NAME: &'static str = "ClientError";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.detail = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.detail.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.detail);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.detail.is_empty() {
            os.write_string(1, &self.detail)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ClientError {
        ClientError::new()
    }

    fn clear(&mut self) {
        self.detail.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ClientError {
        static instance: ClientError = ClientError {
            detail: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ClientError {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ClientError").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ClientError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientError {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:ServerError)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ServerError {
    // message fields
    // @@protoc_insertion_point(field:ServerError.detail)
    pub detail: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ServerError.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ServerError {
    fn default() -> &'a ServerError {
        <ServerError as ::protobuf::Message>::default_instance()
    }
}

impl ServerError {
    pub fn new() -> ServerError {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "detail",
            |m: &ServerError| { &m.detail },
            |m: &mut ServerError| { &mut m.detail },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ServerError>(
            "ServerError",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ServerError {
    const NAME: &'static str = "ServerError";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.detail = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.detail.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.detail);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.detail.is_empty() {
            os.write_string(1, &self.detail)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ServerError {
        ServerError::new()
    }

    fn clear(&mut self) {
        self.detail.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ServerError {
        static instance: ServerError = ServerError {
            detail: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ServerError {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ServerError").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ServerError {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerError {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eresponse.proto\x1a\x0ccommon.proto\"\x98\x02\n\x08Response\x12\x20\
    \n\x03get\x18\x01\x20\x01(\x0b2\x0c.GetResponseH\0R\x03get\x12)\n\x06ins\
    ert\x18\x02\x20\x01(\x0b2\x0f.InsertResponseH\0R\x06insert\x12)\n\x06del\
    ete\x18\x03\x20\x01(\x0b2\x0f.DeleteResponseH\0R\x06delete\x12&\n\x05bat\
    ch\x18\x04\x20\x01(\x0b2\x0e.BatchResponseH\0R\x05batch\x121\n\x0cclient\
    _error\x18\x05\x20\x01(\x0b2\x0c.ClientErrorH\0R\x0bclientError\x121\n\
    \x0cserver_error\x18\x06\x20\x01(\x0b2\x0c.ServerErrorH\0R\x0bserverErro\
    rB\x06\n\x04data\"\x81\x01\n\x0bGetResponse\x12\x19\n\x08hash_key\x18\
    \x01\x20\x01(\tR\x07hashKey\x12!\n\x08sort_key\x18\x02\x20\x01(\x0b2\x06\
    .ValueR\x07sortKey\x12\x1e\n\x06values\x18\x03\x20\x03(\x0b2\x06.ValueR\
    \x06values\x12\x14\n\x05table\x18\x04\x20\x01(\tR\x05table\"$\n\x0eInser\
    tResponse\x12\x12\n\x04okay\x18\x01\x20\x01(\x08R\x04okay\"$\n\x0eDelete\
    Response\x12\x12\n\x04okay\x18\x01\x20\x01(\x08R\x04okay\"9\n\rBatchResp\
    onse\x12(\n\x05items\x18\x01\x20\x03(\x0b2\x12.BatchResponseItemR\x05ite\
    ms\"\x93\x01\n\x11BatchResponseItem\x12\x20\n\x03get\x18\x01\x20\x01(\
    \x0b2\x0c.GetResponseH\0R\x03get\x12)\n\x06insert\x18\x02\x20\x01(\x0b2\
    \x0f.InsertResponseH\0R\x06insert\x12)\n\x06delete\x18\x03\x20\x01(\x0b2\
    \x0f.DeleteResponseH\0R\x06deleteB\x06\n\x04item\"%\n\x0bClientError\x12\
    \x16\n\x06detail\x18\x01\x20\x01(\tR\x06detail\"%\n\x0bServerError\x12\
    \x16\n\x06detail\x18\x01\x20\x01(\tR\x06detailb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::common::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(8);
            messages.push(Response::generated_message_descriptor_data());
            messages.push(GetResponse::generated_message_descriptor_data());
            messages.push(InsertResponse::generated_message_descriptor_data());
            messages.push(DeleteResponse::generated_message_descriptor_data());
            messages.push(BatchResponse::generated_message_descriptor_data());
            messages.push(BatchResponseItem::generated_message_descriptor_data());
            messages.push(ClientError::generated_message_descriptor_data());
            messages.push(ServerError::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

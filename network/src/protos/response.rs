// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 25.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `response.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Response {
    // message fields
    // @@protoc_insertion_point(field:Response.type)
    pub type_: ::protobuf::EnumOrUnknown<ResponseType>,
    // @@protoc_insertion_point(field:Response.data)
    pub data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Response| { &m.type_ },
            |m: &mut Response| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &Response| { &m.data },
            |m: &mut Response| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Response>(
            "Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Response {
    const NAME: &'static str = "Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(ResponseType::RESPONSE_TYPE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(ResponseType::RESPONSE_TYPE_UNSPECIFIED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Response {
        Response::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(ResponseType::RESPONSE_TYPE_UNSPECIFIED);
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Response {
        static instance: Response = Response {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GetResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetResponse {
    // message fields
    // @@protoc_insertion_point(field:GetResponse.hash_key)
    pub hash_key: ::std::string::String,
    // @@protoc_insertion_point(field:GetResponse.sort_key)
    pub sort_key: ::protobuf::MessageField<super::common::Value>,
    // @@protoc_insertion_point(field:GetResponse.values)
    pub values: ::std::vec::Vec<super::common::Value>,
    // special fields
    // @@protoc_insertion_point(special_field:GetResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetResponse {
    fn default() -> &'a GetResponse {
        <GetResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetResponse {
    pub fn new() -> GetResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash_key",
            |m: &GetResponse| { &m.hash_key },
            |m: &mut GetResponse| { &mut m.hash_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Value>(
            "sort_key",
            |m: &GetResponse| { &m.sort_key },
            |m: &mut GetResponse| { &mut m.sort_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "values",
            |m: &GetResponse| { &m.values },
            |m: &mut GetResponse| { &mut m.values },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetResponse>(
            "GetResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetResponse {
    const NAME: &'static str = "GetResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.hash_key = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sort_key)?;
                },
                26 => {
                    self.values.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.hash_key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.hash_key);
        }
        if let Some(v) = self.sort_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.hash_key.is_empty() {
            os.write_string(1, &self.hash_key)?;
        }
        if let Some(v) = self.sort_key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.values {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetResponse {
        GetResponse::new()
    }

    fn clear(&mut self) {
        self.hash_key.clear();
        self.sort_key.clear();
        self.values.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetResponse {
        static instance: GetResponse = GetResponse {
            hash_key: ::std::string::String::new(),
            sort_key: ::protobuf::MessageField::none(),
            values: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:InsertResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct InsertResponse {
    // message fields
    // @@protoc_insertion_point(field:InsertResponse.okay)
    pub okay: bool,
    // special fields
    // @@protoc_insertion_point(special_field:InsertResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InsertResponse {
    fn default() -> &'a InsertResponse {
        <InsertResponse as ::protobuf::Message>::default_instance()
    }
}

impl InsertResponse {
    pub fn new() -> InsertResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "okay",
            |m: &InsertResponse| { &m.okay },
            |m: &mut InsertResponse| { &mut m.okay },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InsertResponse>(
            "InsertResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InsertResponse {
    const NAME: &'static str = "InsertResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.okay = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.okay != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.okay != false {
            os.write_bool(1, self.okay)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InsertResponse {
        InsertResponse::new()
    }

    fn clear(&mut self) {
        self.okay = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InsertResponse {
        static instance: InsertResponse = InsertResponse {
            okay: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InsertResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InsertResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InsertResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InsertResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Delete)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Delete {
    // message fields
    // @@protoc_insertion_point(field:Delete.okay)
    pub okay: bool,
    // special fields
    // @@protoc_insertion_point(special_field:Delete.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Delete {
    fn default() -> &'a Delete {
        <Delete as ::protobuf::Message>::default_instance()
    }
}

impl Delete {
    pub fn new() -> Delete {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "okay",
            |m: &Delete| { &m.okay },
            |m: &mut Delete| { &mut m.okay },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Delete>(
            "Delete",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Delete {
    const NAME: &'static str = "Delete";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.okay = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.okay != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.okay != false {
            os.write_bool(1, self.okay)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Delete {
        Delete::new()
    }

    fn clear(&mut self) {
        self.okay = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Delete {
        static instance: Delete = Delete {
            okay: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Delete {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Delete").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Delete {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Delete {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ResponseType)
pub enum ResponseType {
    // @@protoc_insertion_point(enum_value:ResponseType.RESPONSE_TYPE_UNSPECIFIED)
    RESPONSE_TYPE_UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:ResponseType.RESPONSE_TYPE_GET)
    RESPONSE_TYPE_GET = 1,
    // @@protoc_insertion_point(enum_value:ResponseType.RESPONSE_TYPE_INSERT)
    RESPONSE_TYPE_INSERT = 2,
    // @@protoc_insertion_point(enum_value:ResponseType.RESPONSE_TYPE_DELETE)
    RESPONSE_TYPE_DELETE = 3,
}

impl ::protobuf::Enum for ResponseType {
    const NAME: &'static str = "ResponseType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ResponseType> {
        match value {
            0 => ::std::option::Option::Some(ResponseType::RESPONSE_TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(ResponseType::RESPONSE_TYPE_GET),
            2 => ::std::option::Option::Some(ResponseType::RESPONSE_TYPE_INSERT),
            3 => ::std::option::Option::Some(ResponseType::RESPONSE_TYPE_DELETE),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ResponseType> {
        match str {
            "RESPONSE_TYPE_UNSPECIFIED" => ::std::option::Option::Some(ResponseType::RESPONSE_TYPE_UNSPECIFIED),
            "RESPONSE_TYPE_GET" => ::std::option::Option::Some(ResponseType::RESPONSE_TYPE_GET),
            "RESPONSE_TYPE_INSERT" => ::std::option::Option::Some(ResponseType::RESPONSE_TYPE_INSERT),
            "RESPONSE_TYPE_DELETE" => ::std::option::Option::Some(ResponseType::RESPONSE_TYPE_DELETE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ResponseType] = &[
        ResponseType::RESPONSE_TYPE_UNSPECIFIED,
        ResponseType::RESPONSE_TYPE_GET,
        ResponseType::RESPONSE_TYPE_INSERT,
        ResponseType::RESPONSE_TYPE_DELETE,
    ];
}

impl ::protobuf::EnumFull for ResponseType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ResponseType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ResponseType {
    fn default() -> Self {
        ResponseType::RESPONSE_TYPE_UNSPECIFIED
    }
}

impl ResponseType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ResponseType>("ResponseType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eresponse.proto\x1a\x0ccommon.proto\"A\n\x08Response\x12!\n\x04type\
    \x18\x01\x20\x01(\x0e2\r.ResponseTypeR\x04type\x12\x12\n\x04data\x18\x02\
    \x20\x01(\x0cR\x04data\"k\n\x0bGetResponse\x12\x19\n\x08hash_key\x18\x01\
    \x20\x01(\tR\x07hashKey\x12!\n\x08sort_key\x18\x02\x20\x01(\x0b2\x06.Val\
    ueR\x07sortKey\x12\x1e\n\x06values\x18\x03\x20\x03(\x0b2\x06.ValueR\x06v\
    alues\"$\n\x0eInsertResponse\x12\x12\n\x04okay\x18\x01\x20\x01(\x08R\x04\
    okay\"\x1c\n\x06Delete\x12\x12\n\x04okay\x18\x01\x20\x01(\x08R\x04okay*x\
    \n\x0cResponseType\x12\x1d\n\x19RESPONSE_TYPE_UNSPECIFIED\x10\0\x12\x15\
    \n\x11RESPONSE_TYPE_GET\x10\x01\x12\x18\n\x14RESPONSE_TYPE_INSERT\x10\
    \x02\x12\x18\n\x14RESPONSE_TYPE_DELETE\x10\x03b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::common::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(Response::generated_message_descriptor_data());
            messages.push(GetResponse::generated_message_descriptor_data());
            messages.push(InsertResponse::generated_message_descriptor_data());
            messages.push(Delete::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(ResponseType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

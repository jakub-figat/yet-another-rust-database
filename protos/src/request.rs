// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 25.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `request.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Request {
    // message oneof groups
    pub data: ::std::option::Option<request::Data>,
    // special fields
    // @@protoc_insertion_point(special_field:Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Request {
    fn default() -> &'a Request {
        <Request as ::protobuf::Message>::default_instance()
    }
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }

    // .GetRequest get = 1;

    pub fn get(&self) -> &GetRequest {
        match self.data {
            ::std::option::Option::Some(request::Data::Get(ref v)) => v,
            _ => <GetRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_get(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_get(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(request::Data::Get(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_get(&mut self, v: GetRequest) {
        self.data = ::std::option::Option::Some(request::Data::Get(v))
    }

    // Mutable pointer to the field.
    pub fn mut_get(&mut self) -> &mut GetRequest {
        if let ::std::option::Option::Some(request::Data::Get(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(request::Data::Get(GetRequest::new()));
        }
        match self.data {
            ::std::option::Option::Some(request::Data::Get(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_get(&mut self) -> GetRequest {
        if self.has_get() {
            match self.data.take() {
                ::std::option::Option::Some(request::Data::Get(v)) => v,
                _ => panic!(),
            }
        } else {
            GetRequest::new()
        }
    }

    // .InsertRequest insert = 2;

    pub fn insert(&self) -> &InsertRequest {
        match self.data {
            ::std::option::Option::Some(request::Data::Insert(ref v)) => v,
            _ => <InsertRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_insert(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_insert(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(request::Data::Insert(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_insert(&mut self, v: InsertRequest) {
        self.data = ::std::option::Option::Some(request::Data::Insert(v))
    }

    // Mutable pointer to the field.
    pub fn mut_insert(&mut self) -> &mut InsertRequest {
        if let ::std::option::Option::Some(request::Data::Insert(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(request::Data::Insert(InsertRequest::new()));
        }
        match self.data {
            ::std::option::Option::Some(request::Data::Insert(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_insert(&mut self) -> InsertRequest {
        if self.has_insert() {
            match self.data.take() {
                ::std::option::Option::Some(request::Data::Insert(v)) => v,
                _ => panic!(),
            }
        } else {
            InsertRequest::new()
        }
    }

    // .DeleteRequest delete = 3;

    pub fn delete(&self) -> &DeleteRequest {
        match self.data {
            ::std::option::Option::Some(request::Data::Delete(ref v)) => v,
            _ => <DeleteRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_delete(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_delete(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(request::Data::Delete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delete(&mut self, v: DeleteRequest) {
        self.data = ::std::option::Option::Some(request::Data::Delete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delete(&mut self) -> &mut DeleteRequest {
        if let ::std::option::Option::Some(request::Data::Delete(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(request::Data::Delete(DeleteRequest::new()));
        }
        match self.data {
            ::std::option::Option::Some(request::Data::Delete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delete(&mut self) -> DeleteRequest {
        if self.has_delete() {
            match self.data.take() {
                ::std::option::Option::Some(request::Data::Delete(v)) => v,
                _ => panic!(),
            }
        } else {
            DeleteRequest::new()
        }
    }

    // .GetManyRequest get_many = 4;

    pub fn get_many(&self) -> &GetManyRequest {
        match self.data {
            ::std::option::Option::Some(request::Data::GetMany(ref v)) => v,
            _ => <GetManyRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_get_many(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_get_many(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(request::Data::GetMany(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_get_many(&mut self, v: GetManyRequest) {
        self.data = ::std::option::Option::Some(request::Data::GetMany(v))
    }

    // Mutable pointer to the field.
    pub fn mut_get_many(&mut self) -> &mut GetManyRequest {
        if let ::std::option::Option::Some(request::Data::GetMany(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(request::Data::GetMany(GetManyRequest::new()));
        }
        match self.data {
            ::std::option::Option::Some(request::Data::GetMany(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_get_many(&mut self) -> GetManyRequest {
        if self.has_get_many() {
            match self.data.take() {
                ::std::option::Option::Some(request::Data::GetMany(v)) => v,
                _ => panic!(),
            }
        } else {
            GetManyRequest::new()
        }
    }

    // .BatchRequest batch = 5;

    pub fn batch(&self) -> &BatchRequest {
        match self.data {
            ::std::option::Option::Some(request::Data::Batch(ref v)) => v,
            _ => <BatchRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_batch(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_batch(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(request::Data::Batch(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_batch(&mut self, v: BatchRequest) {
        self.data = ::std::option::Option::Some(request::Data::Batch(v))
    }

    // Mutable pointer to the field.
    pub fn mut_batch(&mut self) -> &mut BatchRequest {
        if let ::std::option::Option::Some(request::Data::Batch(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(request::Data::Batch(BatchRequest::new()));
        }
        match self.data {
            ::std::option::Option::Some(request::Data::Batch(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_batch(&mut self) -> BatchRequest {
        if self.has_batch() {
            match self.data.take() {
                ::std::option::Option::Some(request::Data::Batch(v)) => v,
                _ => panic!(),
            }
        } else {
            BatchRequest::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, GetRequest>(
            "get",
            Request::has_get,
            Request::get,
            Request::mut_get,
            Request::set_get,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, InsertRequest>(
            "insert",
            Request::has_insert,
            Request::insert,
            Request::mut_insert,
            Request::set_insert,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, DeleteRequest>(
            "delete",
            Request::has_delete,
            Request::delete,
            Request::mut_delete,
            Request::set_delete,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, GetManyRequest>(
            "get_many",
            Request::has_get_many,
            Request::get_many,
            Request::mut_get_many,
            Request::set_get_many,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, BatchRequest>(
            "batch",
            Request::has_batch,
            Request::batch,
            Request::mut_batch,
            Request::set_batch,
        ));
        oneofs.push(request::Data::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Request>(
            "Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Request {
    const NAME: &'static str = "Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data = ::std::option::Option::Some(request::Data::Get(is.read_message()?));
                },
                18 => {
                    self.data = ::std::option::Option::Some(request::Data::Insert(is.read_message()?));
                },
                26 => {
                    self.data = ::std::option::Option::Some(request::Data::Delete(is.read_message()?));
                },
                34 => {
                    self.data = ::std::option::Option::Some(request::Data::GetMany(is.read_message()?));
                },
                42 => {
                    self.data = ::std::option::Option::Some(request::Data::Batch(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &request::Data::Get(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &request::Data::Insert(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &request::Data::Delete(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &request::Data::GetMany(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &request::Data::Batch(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &request::Data::Get(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &request::Data::Insert(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &request::Data::Delete(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &request::Data::GetMany(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &request::Data::Batch(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Request {
        Request::new()
    }

    fn clear(&mut self) {
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Request {
        static instance: Request = Request {
            data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Request`
pub mod request {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:Request.data)
    pub enum Data {
        // @@protoc_insertion_point(oneof_field:Request.get)
        Get(super::GetRequest),
        // @@protoc_insertion_point(oneof_field:Request.insert)
        Insert(super::InsertRequest),
        // @@protoc_insertion_point(oneof_field:Request.delete)
        Delete(super::DeleteRequest),
        // @@protoc_insertion_point(oneof_field:Request.get_many)
        GetMany(super::GetManyRequest),
        // @@protoc_insertion_point(oneof_field:Request.batch)
        Batch(super::BatchRequest),
    }

    impl ::protobuf::Oneof for Data {
    }

    impl ::protobuf::OneofFull for Data {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Request as ::protobuf::MessageFull>::descriptor().oneof_by_name("data").unwrap()).clone()
        }
    }

    impl Data {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Data>("data")
        }
    }
}

// @@protoc_insertion_point(message:GetRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetRequest {
    // message fields
    // @@protoc_insertion_point(field:GetRequest.hash_key)
    pub hash_key: ::std::string::String,
    // @@protoc_insertion_point(field:GetRequest.sort_key)
    pub sort_key: ::protobuf::MessageField<super::common::Value>,
    // @@protoc_insertion_point(field:GetRequest.table)
    pub table: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:GetRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetRequest {
    fn default() -> &'a GetRequest {
        <GetRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetRequest {
    pub fn new() -> GetRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash_key",
            |m: &GetRequest| { &m.hash_key },
            |m: &mut GetRequest| { &mut m.hash_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Value>(
            "sort_key",
            |m: &GetRequest| { &m.sort_key },
            |m: &mut GetRequest| { &mut m.sort_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "table",
            |m: &GetRequest| { &m.table },
            |m: &mut GetRequest| { &mut m.table },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetRequest>(
            "GetRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetRequest {
    const NAME: &'static str = "GetRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.hash_key = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sort_key)?;
                },
                26 => {
                    self.table = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.hash_key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.hash_key);
        }
        if let Some(v) = self.sort_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.table.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.table);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.hash_key.is_empty() {
            os.write_string(1, &self.hash_key)?;
        }
        if let Some(v) = self.sort_key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if !self.table.is_empty() {
            os.write_string(3, &self.table)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetRequest {
        GetRequest::new()
    }

    fn clear(&mut self) {
        self.hash_key.clear();
        self.sort_key.clear();
        self.table.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetRequest {
        static instance: GetRequest = GetRequest {
            hash_key: ::std::string::String::new(),
            sort_key: ::protobuf::MessageField::none(),
            table: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:InsertRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct InsertRequest {
    // message fields
    // @@protoc_insertion_point(field:InsertRequest.hash_key)
    pub hash_key: ::std::string::String,
    // @@protoc_insertion_point(field:InsertRequest.sort_key)
    pub sort_key: ::protobuf::MessageField<super::common::Value>,
    // @@protoc_insertion_point(field:InsertRequest.values)
    pub values: ::std::vec::Vec<super::common::Value>,
    // @@protoc_insertion_point(field:InsertRequest.table)
    pub table: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:InsertRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InsertRequest {
    fn default() -> &'a InsertRequest {
        <InsertRequest as ::protobuf::Message>::default_instance()
    }
}

impl InsertRequest {
    pub fn new() -> InsertRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash_key",
            |m: &InsertRequest| { &m.hash_key },
            |m: &mut InsertRequest| { &mut m.hash_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Value>(
            "sort_key",
            |m: &InsertRequest| { &m.sort_key },
            |m: &mut InsertRequest| { &mut m.sort_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "values",
            |m: &InsertRequest| { &m.values },
            |m: &mut InsertRequest| { &mut m.values },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "table",
            |m: &InsertRequest| { &m.table },
            |m: &mut InsertRequest| { &mut m.table },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InsertRequest>(
            "InsertRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InsertRequest {
    const NAME: &'static str = "InsertRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.hash_key = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sort_key)?;
                },
                26 => {
                    self.values.push(is.read_message()?);
                },
                34 => {
                    self.table = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.hash_key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.hash_key);
        }
        if let Some(v) = self.sort_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.table.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.table);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.hash_key.is_empty() {
            os.write_string(1, &self.hash_key)?;
        }
        if let Some(v) = self.sort_key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.values {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if !self.table.is_empty() {
            os.write_string(4, &self.table)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InsertRequest {
        InsertRequest::new()
    }

    fn clear(&mut self) {
        self.hash_key.clear();
        self.sort_key.clear();
        self.values.clear();
        self.table.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InsertRequest {
        static instance: InsertRequest = InsertRequest {
            hash_key: ::std::string::String::new(),
            sort_key: ::protobuf::MessageField::none(),
            values: ::std::vec::Vec::new(),
            table: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InsertRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InsertRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InsertRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InsertRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:DeleteRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DeleteRequest {
    // message fields
    // @@protoc_insertion_point(field:DeleteRequest.hash_key)
    pub hash_key: ::std::string::String,
    // @@protoc_insertion_point(field:DeleteRequest.sort_key)
    pub sort_key: ::protobuf::MessageField<super::common::Value>,
    // @@protoc_insertion_point(field:DeleteRequest.table)
    pub table: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:DeleteRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeleteRequest {
    fn default() -> &'a DeleteRequest {
        <DeleteRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteRequest {
    pub fn new() -> DeleteRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash_key",
            |m: &DeleteRequest| { &m.hash_key },
            |m: &mut DeleteRequest| { &mut m.hash_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::common::Value>(
            "sort_key",
            |m: &DeleteRequest| { &m.sort_key },
            |m: &mut DeleteRequest| { &mut m.sort_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "table",
            |m: &DeleteRequest| { &m.table },
            |m: &mut DeleteRequest| { &mut m.table },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteRequest>(
            "DeleteRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeleteRequest {
    const NAME: &'static str = "DeleteRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.hash_key = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.sort_key)?;
                },
                26 => {
                    self.table = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.hash_key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.hash_key);
        }
        if let Some(v) = self.sort_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.table.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.table);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.hash_key.is_empty() {
            os.write_string(1, &self.hash_key)?;
        }
        if let Some(v) = self.sort_key.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if !self.table.is_empty() {
            os.write_string(3, &self.table)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeleteRequest {
        DeleteRequest::new()
    }

    fn clear(&mut self) {
        self.hash_key.clear();
        self.sort_key.clear();
        self.table.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeleteRequest {
        static instance: DeleteRequest = DeleteRequest {
            hash_key: ::std::string::String::new(),
            sort_key: ::protobuf::MessageField::none(),
            table: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeleteRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeleteRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeleteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:GetManyRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetManyRequest {
    // message fields
    // @@protoc_insertion_point(field:GetManyRequest.items)
    pub items: ::std::vec::Vec<GetRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:GetManyRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetManyRequest {
    fn default() -> &'a GetManyRequest {
        <GetManyRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetManyRequest {
    pub fn new() -> GetManyRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &GetManyRequest| { &m.items },
            |m: &mut GetManyRequest| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetManyRequest>(
            "GetManyRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetManyRequest {
    const NAME: &'static str = "GetManyRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetManyRequest {
        GetManyRequest::new()
    }

    fn clear(&mut self) {
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetManyRequest {
        static instance: GetManyRequest = GetManyRequest {
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetManyRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetManyRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetManyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetManyRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:BatchRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BatchRequest {
    // message fields
    // @@protoc_insertion_point(field:BatchRequest.items)
    pub items: ::std::vec::Vec<BatchItem>,
    // special fields
    // @@protoc_insertion_point(special_field:BatchRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BatchRequest {
    fn default() -> &'a BatchRequest {
        <BatchRequest as ::protobuf::Message>::default_instance()
    }
}

impl BatchRequest {
    pub fn new() -> BatchRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &BatchRequest| { &m.items },
            |m: &mut BatchRequest| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BatchRequest>(
            "BatchRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BatchRequest {
    const NAME: &'static str = "BatchRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BatchRequest {
        BatchRequest::new()
    }

    fn clear(&mut self) {
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BatchRequest {
        static instance: BatchRequest = BatchRequest {
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BatchRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BatchRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BatchRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:BatchItem)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BatchItem {
    // message oneof groups
    pub item: ::std::option::Option<batch_item::Item>,
    // special fields
    // @@protoc_insertion_point(special_field:BatchItem.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BatchItem {
    fn default() -> &'a BatchItem {
        <BatchItem as ::protobuf::Message>::default_instance()
    }
}

impl BatchItem {
    pub fn new() -> BatchItem {
        ::std::default::Default::default()
    }

    // .InsertRequest insert = 1;

    pub fn insert(&self) -> &InsertRequest {
        match self.item {
            ::std::option::Option::Some(batch_item::Item::Insert(ref v)) => v,
            _ => <InsertRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_insert(&mut self) {
        self.item = ::std::option::Option::None;
    }

    pub fn has_insert(&self) -> bool {
        match self.item {
            ::std::option::Option::Some(batch_item::Item::Insert(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_insert(&mut self, v: InsertRequest) {
        self.item = ::std::option::Option::Some(batch_item::Item::Insert(v))
    }

    // Mutable pointer to the field.
    pub fn mut_insert(&mut self) -> &mut InsertRequest {
        if let ::std::option::Option::Some(batch_item::Item::Insert(_)) = self.item {
        } else {
            self.item = ::std::option::Option::Some(batch_item::Item::Insert(InsertRequest::new()));
        }
        match self.item {
            ::std::option::Option::Some(batch_item::Item::Insert(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_insert(&mut self) -> InsertRequest {
        if self.has_insert() {
            match self.item.take() {
                ::std::option::Option::Some(batch_item::Item::Insert(v)) => v,
                _ => panic!(),
            }
        } else {
            InsertRequest::new()
        }
    }

    // .DeleteRequest delete = 2;

    pub fn delete(&self) -> &DeleteRequest {
        match self.item {
            ::std::option::Option::Some(batch_item::Item::Delete(ref v)) => v,
            _ => <DeleteRequest as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_delete(&mut self) {
        self.item = ::std::option::Option::None;
    }

    pub fn has_delete(&self) -> bool {
        match self.item {
            ::std::option::Option::Some(batch_item::Item::Delete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delete(&mut self, v: DeleteRequest) {
        self.item = ::std::option::Option::Some(batch_item::Item::Delete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delete(&mut self) -> &mut DeleteRequest {
        if let ::std::option::Option::Some(batch_item::Item::Delete(_)) = self.item {
        } else {
            self.item = ::std::option::Option::Some(batch_item::Item::Delete(DeleteRequest::new()));
        }
        match self.item {
            ::std::option::Option::Some(batch_item::Item::Delete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delete(&mut self) -> DeleteRequest {
        if self.has_delete() {
            match self.item.take() {
                ::std::option::Option::Some(batch_item::Item::Delete(v)) => v,
                _ => panic!(),
            }
        } else {
            DeleteRequest::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, InsertRequest>(
            "insert",
            BatchItem::has_insert,
            BatchItem::insert,
            BatchItem::mut_insert,
            BatchItem::set_insert,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, DeleteRequest>(
            "delete",
            BatchItem::has_delete,
            BatchItem::delete,
            BatchItem::mut_delete,
            BatchItem::set_delete,
        ));
        oneofs.push(batch_item::Item::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BatchItem>(
            "BatchItem",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BatchItem {
    const NAME: &'static str = "BatchItem";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.item = ::std::option::Option::Some(batch_item::Item::Insert(is.read_message()?));
                },
                18 => {
                    self.item = ::std::option::Option::Some(batch_item::Item::Delete(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.item {
            match v {
                &batch_item::Item::Insert(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &batch_item::Item::Delete(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.item {
            match v {
                &batch_item::Item::Insert(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &batch_item::Item::Delete(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BatchItem {
        BatchItem::new()
    }

    fn clear(&mut self) {
        self.item = ::std::option::Option::None;
        self.item = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BatchItem {
        static instance: BatchItem = BatchItem {
            item: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BatchItem {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BatchItem").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BatchItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchItem {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `BatchItem`
pub mod batch_item {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:BatchItem.item)
    pub enum Item {
        // @@protoc_insertion_point(oneof_field:BatchItem.insert)
        Insert(super::InsertRequest),
        // @@protoc_insertion_point(oneof_field:BatchItem.delete)
        Delete(super::DeleteRequest),
    }

    impl ::protobuf::Oneof for Item {
    }

    impl ::protobuf::OneofFull for Item {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::BatchItem as ::protobuf::MessageFull>::descriptor().oneof_by_name("item").unwrap()).clone()
        }
    }

    impl Item {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Item>("item")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rrequest.proto\x1a\x0ccommon.proto\"\xdb\x01\n\x07Request\x12\x1f\n\
    \x03get\x18\x01\x20\x01(\x0b2\x0b.GetRequestH\0R\x03get\x12(\n\x06insert\
    \x18\x02\x20\x01(\x0b2\x0e.InsertRequestH\0R\x06insert\x12(\n\x06delete\
    \x18\x03\x20\x01(\x0b2\x0e.DeleteRequestH\0R\x06delete\x12,\n\x08get_man\
    y\x18\x04\x20\x01(\x0b2\x0f.GetManyRequestH\0R\x07getMany\x12%\n\x05batc\
    h\x18\x05\x20\x01(\x0b2\r.BatchRequestH\0R\x05batchB\x06\n\x04data\"`\n\
    \nGetRequest\x12\x19\n\x08hash_key\x18\x01\x20\x01(\tR\x07hashKey\x12!\n\
    \x08sort_key\x18\x02\x20\x01(\x0b2\x06.ValueR\x07sortKey\x12\x14\n\x05ta\
    ble\x18\x03\x20\x01(\tR\x05table\"\x83\x01\n\rInsertRequest\x12\x19\n\
    \x08hash_key\x18\x01\x20\x01(\tR\x07hashKey\x12!\n\x08sort_key\x18\x02\
    \x20\x01(\x0b2\x06.ValueR\x07sortKey\x12\x1e\n\x06values\x18\x03\x20\x03\
    (\x0b2\x06.ValueR\x06values\x12\x14\n\x05table\x18\x04\x20\x01(\tR\x05ta\
    ble\"c\n\rDeleteRequest\x12\x19\n\x08hash_key\x18\x01\x20\x01(\tR\x07has\
    hKey\x12!\n\x08sort_key\x18\x02\x20\x01(\x0b2\x06.ValueR\x07sortKey\x12\
    \x14\n\x05table\x18\x03\x20\x01(\tR\x05table\"3\n\x0eGetManyRequest\x12!\
    \n\x05items\x18\x01\x20\x03(\x0b2\x0b.GetRequestR\x05items\"0\n\x0cBatch\
    Request\x12\x20\n\x05items\x18\x01\x20\x03(\x0b2\n.BatchItemR\x05items\"\
    g\n\tBatchItem\x12(\n\x06insert\x18\x01\x20\x01(\x0b2\x0e.InsertRequestH\
    \0R\x06insert\x12(\n\x06delete\x18\x02\x20\x01(\x0b2\x0e.DeleteRequestH\
    \0R\x06deleteB\x06\n\x04itemb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::common::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(Request::generated_message_descriptor_data());
            messages.push(GetRequest::generated_message_descriptor_data());
            messages.push(InsertRequest::generated_message_descriptor_data());
            messages.push(DeleteRequest::generated_message_descriptor_data());
            messages.push(GetManyRequest::generated_message_descriptor_data());
            messages.push(BatchRequest::generated_message_descriptor_data());
            messages.push(BatchItem::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
